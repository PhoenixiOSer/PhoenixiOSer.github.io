[{
    "title": "读《程序员的自我修养-链接、装载与库》—— 基础知识",
    "date": "",
    "description": "",
    "body": "基础知识 计算机是个非常广泛的概念，大到占用数层楼的用于科学计算的超级计算机，小到手机上的嵌入式芯片都可以被称为计算机。撇开计算机硬件中纷繁复杂的各种设备、芯片及外围接口等，站在软件开发者的角度看，我们只须抓住硬件的几个关键部件。对于系统程序开发者来说，计算机多如牛毛的硬件设备中，有三个部件最为关键，它们分别是中央处理器CPU、内存和I/O控制芯片，这三个部件几乎就是计算机的核心了。\n通过了解计算机核心的三个部件，我们可以大致的了解计算机运行原理，\n中央处理器CPU 早期的计算机没有很复杂的图形功能，CPU的核心频率也不高，人们首先针对 CPU 的频率进行升级，从 几十 KHz 升级到现在的 4GHz，达到了目前工艺的物理极限。之后开始从数量上提升，增加 CPU 的数量。其中最常见的就是对称多处理器 SMP（Symmetrical Multi-Processing）。目前个人电脑使用多核处理器就是SMP的简化版。\n系统软件传统意义上一般将用于管理计算机本身的软件成为系统软件。系统软件又可分成两块，一块是平台性的，比如操作系统内核、驱动程序、运行库和数以千计的系统工具；另外一块是用于程序开发的，比如编译器、汇编器、链接器等开发工具和开发库。\n早期 CPU 资源十分为了进一步利用 CPU 资源，所以引入了操作系统，由操作系统接管所有的硬件资源，应用程序则以进程的方式运行，每个进程都有自己独立的地址空间，进程之间地址空间相互隔离，CPU 由操作系统统一进行分配，每个进程根据进程优先级的高低都有机会得到CPU，但是，如果运行时间超出了一定的时间，操作系统会暂停该进程，将CPU资源分配给其他等待运行的进程。这种CPU的分配方式即所谓的抢占式（Preemptive），如果操作系统分配给每个进程的时间都很短，即CPU在多个进程间快速地切换，从而造成了很多进程都在同时运行的假象。目前几乎所有现代的操作系统都是采用这种方式，比如我们熟悉的UNIX、Linux、Windows NT，以及Mac OS X等流行的操作系统。\nI/O控制 操作系统位于硬件的上层，是对硬件的管理和抽象。作为应用开发程序员我们不用去关心底层的硬件到底是如何工作的，我们只需要调用操作系统统一的API来完成我们的开发任务。在UNIX中，硬件设备的访问形式跟访问普通的文件形式一样；在Windows系统中，图形硬件被抽象成了GDI，声音和多媒体设备被抽象成了DirectX对象；磁盘被抽象成了普通文件系统。操作系统开发者提供一系列的接口和框架，具体硬件的驱动程序则交由硬件产商实现。\n磁盘驱动程序收到这个读取文件请求以后就向硬盘发出硬件命令。向硬件发送I/O命令的方式有很多种，其中最为常见的一种就是通过读写I/O端口寄存器来实现。\n内存 在早期的计算机中，程序是直接运行在物理内存上的，但随着计算机的发展，为了更好的利用硬件资源。我们必须同时运行程序，那么如何分配有限的物理内存给多个程序使用。\n为了更好的利用内存资源，我们增加了中间层，即使用一种间接的地址访问方法。整个想法是这样的，我们把程序给出的地址看作是一种虚拟地址（Virtual Address），然后通过某些映射的方法，将这个虚拟地址转换成实际的物理地址。每个进程都有自己独立的虚拟空间，而且每个进程只能访问自己的地址空间，这样就有效地做到了进程的隔离。\n目前虚拟内存通过分页（Paging）来进行物理内存和虚拟内存的映射，分页的基本方法是把地址空间人为地等分成固定大小的页，每一页的大小由硬件决定，或硬件支持多种大小的页，由操作系统选择决定页的大小。\n多线程 对于多线程，我们需要了解下线程的概念、线程的调度、线程安全、用户线程与内核线程之间的映射关系。\n线程（Thread），有时被称为轻量级进程（Lightweight Process, LWP），是程序执行流的最小单元。一个标准的线程由线程ID、当前指令指针（PC）、寄存器集合和堆栈组成。通常意义上，一个进程由一个到多个线程组成，各个线程之间共享程序的内存空间（包括代码段、数据段、堆等）及一些进程级的资源（如打开文件和信号）。\n线程状态包括：运行、就绪、等待。\n在单处理器对应多线程的情况下，并发是一种模拟出来的状态。在每个线程切换执行我们称之为线程调度。处于运行中线程拥有一段可以执行的时间，这段时间称为时间片（Time Slice），当时间片用尽的时候，该进程将进入就绪状态。如果在时间片用尽之前进程就开始等待某事件，那么它将进入等待状态。每当一个线程离开运行状态时，调度系统就会选择一个其他的就绪线程继续执行。在一个处于等待状态的线程所等待的事件发生之后，该线程将进入就绪状态。 多个线程同时访问一个共享数据，就有可能造成“脏数据”,下面的代码执行结果可能是0、1、2。\n// 线程1 i = 1; i++; // 线程2 --i; 为了保证数据的安全。我们需要将各个线程对同一个数据的访问同步（Synchronization）。所谓同步，既是指在一个线程访问数据未结束的时候，其他线程不得对同一个数据进行访问。\n锁 同步最常用的方法就是加锁（LOCK），锁是一种非强制机制，每一个线程在访问数据或资源之前首先试图获取（Acquire）锁，并在访问结束之后释放（Release）锁。在锁已经被占用的时候试图获取锁时，线程会等待，直到锁重新可用。\n信号量 二元信号量（Binary Semaphore）是最简单的一种锁，它只有两种状态：占用与非占用。它适合只能被唯一一个线程独占访问的资源。当二元信号量处于非占用状态时，第一个试图获取该二元信号量的线程会获得该锁，并将二元信号量置为占用状态，此后其他的所有试图获取该二元信号量的线程将会等待，直到该锁被释放。（iOS中的 dispatch_semaphore_t）\n互斥锁 互斥量（Mutex）和二元信号量很类似，资源仅同时允许一个线程访问，但和信号量不同的是，信号量在整个系统可以被任意线程获取并释放，也就是说，同一个信号量可以被系统中的一个线程获取之后由另一个线程释放。而互斥量则要求哪个线程获取了互斥量，哪个线程就要负责释放这个锁，其他线程越俎代庖去释放互斥量是无效的。（ pthread_mutex ）\n读写锁 读写锁（Read-Write Lock）致力于一种更加特定的场合的同步。主要针对一些多度单写的情况。读取数据并不会造成数据的不安全。线程可以同时读取数据。只要发生写时才需要锁。对于同一个锁，读写锁有两种获取方式，共享的（Shared）或独占的（Exclusive）。当锁处于自由的状态时，试图以任何一种方式获取锁都能成功，并将锁置于对应的状态。如果锁处于共享状态，其他线程以共享的方式获取锁仍然会成功，此时这个锁分配给了多个线程。然而，如果其他线程试图以独占的方式获取已经处于共享状态的锁，那么它将必须等待锁被所有的线程释放。相应地，处于独占状态的锁将阻止任何其他线程获取该锁，不论它们试图以哪种方式获取。（pthread_rwlock、iOS 可以通过dispatch_barrier_async 实现类似功能）\n条件锁 条件变量（Condition Variable）作为一种同步手段，作用类似于一个栅栏。对于条件变量，线程可以有两种操作，首先线程可以等待条件变量，一个条件变量可以被多个线程等待。其次，线程可以唤醒条件变量，此时某个或所有等待此条件变量的线程都会被唤醒并继续支持。（iOS 中的NSConditionLock）\n编译器的过渡优化 有时候编译器会对代码进行优化：1.调整代码执行顺序、2.为了提高变量访问速度，将变量缓存到寄存器中而不写回。这就会造成多线程代码执行错误。\n// 有时候编译器会将寄存器中的x值缓存起来，线程2读取内存中的x值还是 0，有可能导致最终 // x 的结果为1 x =0 // 线程1 lock() x ++; unlock() // 线程2 lock() x ++; unlock() 我们可以使用volatile关键字试图阻止过度优化，volatile基本可以做到两件事情：\n 阻止编译器为了提高速度将一个变量缓存到寄存器内而不写回。 阻止编译器调整操作volatile变量的指令顺序。  ",
    "ref": "/blog/link_load/"
  },{
    "title": "【译】Flutter动画系列——显示动画",
    "date": "",
    "description": "",
    "body": "在Flutter 动画详解系列——隐式动画中我们介绍了Flutter中的隐式动画，隐式动画创建简单、灵活性差，而显式动画相对来说更加灵活。接下来让我们来看看 Flutter 中的显式动画。\nFlutter内置显示动画FooTransition（Foo代表动画需要改变的属性值） 先来看一张图，下面列出了部分Flutter中内置的显式动画Widget： 我们可以通过直接使用上述的Widget，来创建显示动画，让我们以RotationTransition为例来看看显式动画如何创建。\nRotationTransition Demo // RotationTransition 构造器 RotationTransition({ Widget child, Alignment alignment, Animation\u0026lt;double\u0026gt; turns, }) child 指定哪个widget用来做旋转动画，alignment是坐标系原点的对齐方式，我们想要有银河星系的旋转效果使用center作为坐标系原点。turns：在API文档中定义是Animation抽象类型，turns是显示动画有别于隐式动画的的重要参数。我们使用隐式动画Widget AnimatedContainer 更改transform也能达到图片旋转的效果，但是隐式动画只会执行一次便会停止。借助于显式动画，我们不仅可以控制动画时间长，并可以让动画一直重复执行。\n创建AnimationController AnimationController 顾名思义，是用来控制动画，AnimationController 继承自抽象类Animation\u0026lt;double\u0026gt;,AnimationController 可以监听动画的执行、还能提供一些动画的控制操作。\nclass _TimeMachineState extends State\u0026lt;TimeMachine\u0026gt; { AnimationController _animationController; @override void initState() { super.initState(); _animationController = AnimationController( // ... ); } @override void dispose() { _animationController.dispose(); super.dispose(); } } AnimationController 需要传递两个必要参数，duration 即我们动画的执行时间，默认 AnimationController 在给定的时间段内会线性的生成从0.0到1.0的数字。而具体值的数量和粒度取决于之前的duration参数。设置 vsync 时用来防止屏幕外动画（动画的UI不在当前屏幕时）消耗不必要的资源。 通过将SingleTickerProviderStateMixin添加到类定义中，可以将stateful对象作为vsync的值。\nclass _TimeMachineState extends State\u0026lt;TimeMachine\u0026gt; with SingleTickerProviderStateMixin { AnimationController _animationController; @override void initState() { super.initState(); _animationController = AnimationController( duration: Duration(seconds: 15), vsync: this, ); } @override void dispose() { _animationController.dispose(); super.dispose(); } } 当我们创建完AnimationController后，不要忘记开启动画:\n_animationController = AnimationController( duration: Duration(seconds: 15), vsync: this, )..repeat(); 最后，我们回到上面 RotationTransition 银河旋转动画效果的代码部分，补充完turns参数。\nRotationTransition( child: GalaxyFitz(), alignment: Alignment.center, turns: _animationController, ) 同时，我们也可以通过_animationController来对动画进行控制,如下我们添加了一个100的正方形手势，来暂停、开启动画效果。\nclass TimeStopper extends StatelessWidget { final AnimationController controller; const TimeStopper({Key key, this.controller}) : super(key: key); @override Widget build(BuildContext context) { return GestureDetector( onTap: () { if (controller.isAnimating) { controller.stop(); } else { controller.repeat(); } }, child: Container(color: Colors.red,width: 100,height: 100,), ); } } 小结 相对于隐式动画，显式动画需要一个动画的控制器，我们知道了在Flutter中存在内置的显示动画效果FooTransition。我们可以通过设置 duration 、和 AnimationController 来创建一个重复循环的动画效果，并且我们可以通过 AnimationController 来控制动画。那么当系统自带的显式动画Widget无法满足我们时，我们就需要创建自定义的显式动画啦。\n使用AnimatedBuilder和AnimatedWidget创建自定义显式动画 为了更加具体的了解AnimatedBuilder和AnimatedWidget，我们编写一个外星飞船的动画demo，动画效果是飞船的传输光线。\n首先自定义一个Path剪切器，形成光束的形态。\nimport 'package:flutter/material.dart'; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: MyHomePage(), )); } } class MyHomePage extends StatelessWidget { @override Widget build(BuildContext context) { return Stack( alignment: AlignmentDirectional.center, children: \u0026lt;Widget\u0026gt;[ ClipPath( clipper: const BeamClipper(), child: Container( height: 1000, decoration: BoxDecoration( gradient: RadialGradient( radius: 1.5, colors: [ Colors.yellow, Colors.transparent, ], ), ), ), ), ], ); } } class BeamClipper extends CustomClipper\u0026lt;Path\u0026gt; { const BeamClipper(); @override getClip(Size size) { return Path() ..lineTo(size.width / 2, size.height / 2) ..lineTo(size.width, size.height) ..lineTo(0, size.height) ..lineTo(size.width / 2, size.height / 2) ..close(); } /// Return false always because we always clip the same area. @override bool shouldReclip(CustomClipper oldClipper) =\u0026gt; false; } 接下来就可通过AnimatedBuilder和 AnimatedWidget 来实现动画效果了。\nAnimatedBuilder class MyHomePage extends StatefulWidget { @override _MyHomePageState createState() =\u0026gt; _MyHomePageState(); } class _MyHomePageState extends State\u0026lt;MyHomePage\u0026gt; with SingleTickerProviderStateMixin { final Image starsBackground = Image.asset( 'assets/milky-way.jpg', ); final Image ufo = Image.asset('assets/ufo.png'); AnimationController _animation; @override void initState() { super.initState(); _animation = AnimationController( duration: const Duration(seconds: 5), vsync: this, )..repeat(); } @override Widget build(BuildContext context) { return Stack( alignment: AlignmentDirectional.center, children: \u0026lt;Widget\u0026gt;[ starsBackground, AnimatedBuilder( animation: _animation, builder: (_, __) { return ClipPath( clipper: const BeamClipper(), child: Container( height: 1000, decoration: BoxDecoration( gradient: RadialGradient( radius: 1.5, colors: [ Colors.yellow, Colors.transparent, ], stops: [0, _animation.value], ), ), ), ); }, ), ufo, ], ); } @override void dispose() { _animation.dispose(); super.dispose(); } } class BeamClipper extends CustomClipper\u0026lt;Path\u0026gt; { const BeamClipper(); @override getClip(Size size) { return Path() ..lineTo(size.width / 2, size.height / 2) ..lineTo(size.width, size.height) ..lineTo(0, size.height) ..lineTo(size.width / 2, size.height / 2) ..close(); } /// Return false always because we always clip the same area. @override bool shouldReclip(CustomClipper oldClipper) =\u0026gt; false; } 跟之前Flutter 系统内置的显式动画一样，我们需要创建一个动画控制器、混入 SingleTickerProviderStateMixin 防止屏幕外动画。\n之前在介绍 TweenAnimationBuilder 文章中提到过，在设置 child 参数的时候，如果在动画过程中 child 不会变动，我们可以提前构建它，然后将其传递给AnimatedBuilder。在这个例子中，BeamClipper 可以提供一个常量的构造函数生成常量对象，用于优化动画的性能。\nAnimatedWidget 使用 AnimatedBuilder 代码构建出来的动画效果，可能代码有点臃肿，难以阅读。此时我们可以尝试创建一个 AnimatedWidget 的子类，来完成同样的动画效果。与系统的内置显式动画效果命名一致，推荐FooTransition的命名原则。这里我们将其命名为BeamTransition，\nclass MyHomePage extends StatefulWidget { @override _MyHomePageState createState() =\u0026gt; _MyHomePageState(); } class _MyHomePageState extends State\u0026lt;MyHomePage\u0026gt; with SingleTickerProviderStateMixin { final Image starsBackground = Image.asset( 'assets/milky-way.jpg', ); final Image ufo = Image.asset('assets/ufo.png'); AnimationController _animation; @override void initState() { super.initState(); _animation = AnimationController( duration: const Duration(seconds: 5), vsync: this, )..repeat(); } @override Widget build(BuildContext context) { return Stack( alignment: AlignmentDirectional.center, children: \u0026lt;Widget\u0026gt;[ starsBackground, BeamTransition(animation: _animation), ufo, ], ); } @override void dispose() { _animation.dispose(); super.dispose(); } } class BeamTransition extends AnimatedWidget { BeamTransition({Key key, Animation\u0026lt;double\u0026gt; animation}) : super(key: key, listenable: animation); @override Widget build(BuildContext context) { final Animation\u0026lt;double\u0026gt; animation = listenable; return ClipPath( clipper: const BeamClipper(), child: Container( height: 1000, decoration: BoxDecoration( gradient: RadialGradient( radius: 1.5, colors: [ Colors.yellow, Colors.transparent, ], stops: [0, animation.value], ), ), ), ); } } 我们将上面AnimatedBuilder中build的方法替换了下。将创建动画的代码抽取到了BeamTransition中。注意在BeamTransition中 child 中不变部分的我们使用常量值。\n总结 到此，Flutter 中显式动画的介绍也告一段落了，显式动画能够循环的执行下去、并且通过动画控制器我们可以轻松的控制动画。在自定义显式动画时，比较推荐使用 AnimatedWidget 单独的抽取成一个独立的Widget。当然如果动画足够简单，使用 AnimatedBuilder 不会造成代码阅读的困难的话，也可以是用AnimatedBuilder。\n",
    "ref": "/blog/flutter_animation_explict/"
  },{
    "title": "【译】Flutter动画系列——隐式动画",
    "date": "",
    "description": "",
    "body": "上一篇文章【译】FLUTTER 动画系列—初篇，概述了下Flutter中的动画类型，及如何选择恰当的动画创建方式，接下来我们来看下最简单的动画，隐式动画。\n系统的隐式动画Widget 在 Flutter 中的 Widgets 中有一部已经实现隐式动画Widget。如下图列出部分：\n首先我们来看一段未使用动画的代码：\n bool _bigger = false; @override Widget build(BuildContext context) { return Scaffold( body: Column( mainAxisAlignment: MainAxisAlignment.center, children: \u0026lt;Widget\u0026gt;[ Center( child: Container( width: _bigger ? 100 : 500, height: 100, color: Colors.red, ), ), RaisedButton( onPressed: () =\u0026gt; setState(() { _bigger = !_bigger; }), child: Icon(Icons.star), ), ], ), ); } 未加动画效果时，矩形的形变会显得十分生硬，如果使用AnimatedContainer替换Container，增加一个动画的过渡效果：\n Center( child: AnimatedContainer( width: _bigger ? 100 : 500, height: 100, color: Colors.red, duration: Duration(seconds: 1), ), ), 整个过渡过程显得比较自然顺畅，我们通过新旧值之间的值进行动画处理的过程称为插值。每当旧值和新值发生变化时，AnimatedContainer便会处理其属性插值。\n同样我们也可以通过插值来修改AnimatedContainer的其它属性，包括decoration 的渐变色:\nAnimatedContainer( decoration: BoxDecoration( gradient: RadialGradient( colors: [Colors.purple, Colors.transparent], stops: [ _bigger ? 0.2 : 0.5, 1.0]) ), ), 上述代码很简单的演示如何使用 隐式动画Widget 来实现动画效果，非常的方便简单，但这也意味着可灵活性较差，在隐式动画Widget中，我们控制动画效果只能控制动画时长（Duration）和动画的曲线（Curve,具体的曲线效果可以参考 系统自带的曲线效果）。\nAnimatedContainer( width: _bigger ? 100 : 500, child: Image.asset('assets/star.png'), duration: Duration(seconds: 1), curve: Curves.easeInOutQuint, ), 另外除了系统自带的曲线效果外，我们还可以通过继承Curve来实现自定义的曲线效果,如下实现了正弦曲线。\nclass SineCurve extends Curve { final double count; SineCurve({this.count = 1}); @override double transformInternal(double t) { return sin(count * 2 * pi * t) * 0.5 + 0.5; } } 小结 在Flutter中，系统已经提供了隐式动画的Widget，这些Widget是普通Widget的动画版本，我们可以通过 duration、curve来控制动画效果。\n还有我们不一定需要通过StatefulWidget中使用setState来生成动画效果，我们也可以使用StreamBuilder和FutureBuilder来触发动画。\nFutureBuilder( future: future, builder: (BuildContext context, AsyncSnapshot\u0026lt;String\u0026gt; snapshot) { double width; switch(snapshot.connectionState) { case ConnectionState.none: case ConnectionState.waiting: case ConnectionState.active: width = 0; break; case ConnectionState.done: width = 500; break; } return AnimatedContainer( width: width, height: 100, color: Colors.red, duration: Duration(seconds: 1), ); } ), 以上，如果Flutter框架提供给你的隐式动画Widget不能满足你的需求，那么进一步的话可以试试使用TweenAnimationBuilder 来自定义创建隐式动画。\n自定义隐式动画TweenAnimationBuilder 使用TweenAnimationBuilder，该 Widget 使用的时候我们需要传递 duration 参数动画时间、tween 参数动画要设置的值的范围（补间）、重要的还有 builder 参数，builder函数的参数包含context、补间参数tween的类型、还有child,让我们看一个简单的例子，红色的矩形框旋转360度：\nTweenAnimationBuilder\u0026lt;double\u0026gt;( tween: Tween\u0026lt;double\u0026gt;(begin: 0, end: 2 * pi), duration: Duration(seconds: 2), builder: (BuildContext context, double angle, Widget child) { return Transform.rotate( angle: angle, child: Container( color: Colors.red, width: 100, height: 100, ), ); }, ), 让我们再来看个例子，使用ColorFilered Wideget做一个图片渲染的效果。\nTweenAnimationBuilder( tween: ColorTween(begin: Colors.white, end: Colors.red), duration: Duration(seconds: 2), builder: (_, Color color, __) { return ColorFiltered( child: Image.asset('assets/sun.png'), colorFilter: ColorFilter.mode(color, BlendMode.modulate), ); }, ) 通过Tween补间参数设置了从白色到红色的过渡，由颜色和图片的混合，另外如何补间参数可变的，所以如果补间参数是不变的话可以将参数声明为静态常量来使用。\nstatic final colorTween = ColorTween(begin: Colors.white, end: Colors.red); Center( child: TweenAnimationBuilder\u0026lt;Color\u0026gt;( tween: colorTween, duration: Duration(seconds: 2), builder: (_, Color color, __) { return ColorFiltered( child: Image.asset('assets/sun.png'), colorFilter: ColorFilter.mode(color, BlendMode.modulate), ); }, ), ), 动态修改 Tween 参数 上面的例子中我们并没有调用setState，仅仅展示了动画从Tween的初始值到终值的简单动画效果，除此之外，我们还可以通过动态的修改Tween来实现动画效果：\nclass OngoingAnimationByModifyingEndTweenValue extends StatefulWidget { @override _OngoingAnimationState createState() =\u0026gt; _OngoingAnimationState(); } class _OngoingAnimationState extends State\u0026lt;OngoingAnimationByModifyingEndTweenValue\u0026gt; { double _newValue = .4; Color _newColor = Colors.white; @override Widget build(BuildContext context) { return Stack( children: \u0026lt;Widget\u0026gt;[ starsBackground, Column( children: \u0026lt;Widget\u0026gt;[ Center( child: TweenAnimationBuilder( tween: ColorTween(begin: Colors.white, end: _newColor), duration: Duration(seconds: 2), builder: (_, Color color, __) { return ColorFiltered( child: Image.asset('assets/sun.png'), colorFilter: ColorFilter.mode(color, BlendMode.modulate), ); }, ), ), Slider.adaptive( value: _newValue, onChanged: (double value) { setState(() { _newValue = value; _newColor = Color.lerp(Colors.white, Colors.red, value); }); }, ), ], ), ], ); } } 首先我们声明一个_newColor  作为 Tween 的终值,通过滑动 Slider Widget，我们改变_newColor。调用setState每次的滑动都会使得动画更新。\n另外，需要明确的一点事，TweenAnimationBuilder 的动画属性值是从当前值向最新的终值转变的。如上面的例子，当我们拖动 Slider 时，颜色变化相对于之前的颜色,而不是每次从最初的白色开始动画渐变。\nTweenAnimationBuilder 总会将当前颜色到终值颜色平滑的动画过渡。所以如果改变的不是终值颜色而是开始颜色，动画效果是不会有区别的。\n补充说明 除了上诉介绍的TweenAnimationBuilder参数外，我们还需要注意的参数还有：\n curve，动画曲线，在上一篇文章Flutter 动画详解系列有过介绍。 动画完成的回调 onEnd :，我们可以在动画完成时完成指定的操作，如动画完成后显示另一个Widget。 child参数，child参数的设置其实也是一个潜在的性能优化项，正确的设置child，对动画性能的提升也是一大帮助。例子中虽然颜色发生了变化，但图片本身保持不变，但是当前代码是每次build都会重新创建Image Widget。针对此类的优化方式，我们可以提前创建图片，将图片作为参数传入，这样 Flutter 就知道每帧渲染时变化的是颜色，而不是图片本身。 当然因为例子本身简单，所以此优化不会有明显的效果，但当实现复杂动画效果时，慎重考虑child的实现，将会对你的动画性能带来一定的帮助。  总结 OK，以上就是对 Flutter 中的隐式动画的介绍了，包括系统自带的AnimatedFoo和TweenAnimationBuilder 都有了一定的涉及。包括如何不通过使用StatefulWidget来实现动画效果、如何改变tween的终值产生顺滑的动画效果、如何提升TweenAnimationBuilder 的动画性能时，我们可以设置tween参数时可以考虑设置为静态常量，设置child参数时可以考虑提前创建好child，作为参数传递。\n",
    "ref": "/blog/flutter_animation_implict/"
  },{
    "title": "【译】Flutter 动画系列——初篇",
    "date": "",
    "description": "",
    "body": " 前言：动画会让用户界面感觉更直观、流畅，能改善用户体验。 在Flutter中我们可以轻松实现各种动画类型。目前Flutter中很多 widget（特别是Material Design widgets），都实现了设计规范中定义的标准动画效果。但是我们也可以自定义这些动画效果。\n Flutter中动画的类型 在Flutter中动画分为两类： 基于图形动画（以图形的形式制作动画，三方库 Rive 、Lottie）、基于代码动画 （主要针对于 Widgets 的大小、 颜色、形状变动）。文章主要讲解基于代码动画类型的动画。\n基于代码动画 在 Flutter 中基于代码动画，也主要分为两种形式：补间(Tween)动画、 拟物动画。\n补间(Tween)动画 Tween意为在两者之间，在Tween动画中我们定义开始点和结束点、时间线以及定义转换时间和速度的曲线。然后就交由框架完成如何从开始点过渡到结束点的动画效果。\n拟物动画 拟物动画是对真实世界的行为进行建模，使动画效果类似于现实中的物理效果。例如当你掷球时，它在何处落地，取决于抛球速度有多快、球有多重、距离地面有多远。\n如何创建恰当的动画 在知道 Flutter 的动画类型之后，我们需要知道如何创建我们想要的动画效果，在 Flutter 动画也被分为隐式动画、 显示动画。当我们创建一个动画效果时，如果你不知道如何选择这两种方式，你可以试着回答下面的三个问题：\n  动画效果是否\u0026quot;永远\u0026quot;重复？永远是指某个条件下动画一直重复，当条件变动时，动画可以停止。\n  动画的值是否不连续？如下图圆从小到大、从小到大，并未连续的小-\u0026gt;大-\u0026gt;小-\u0026gt;大。   动画是否由多个Widgets共同组成？   如果以上三个问题，都是肯定的回答，那么你需要的是显示动画，否则使用隐式动画将会是你更好的选择。\n隐式动画 如果你选择了隐式动画之后，首先你可以尝试在 Flutter 框架中寻找符合你要求的 Widgets，Flutter 对隐式动画的命名方式一般为 AnimatedFoo， 其中 Foo 是需要设置动画的属性。如果找不到符合自己需求的内置动画Widget，我们可以使用 TweenAnimationBuilder（补间动画生成器）创建自定义的隐式动画。\n显示动画 如果你的选择是显示动画，那么你也可以尝试在 Flutter 框架中寻找符合 Widgets。Flutter 对显示动画的命名方式一般为FooTransition， 其中 Foo 是需要设置动画的属性（如SlideTransition）。如果找不到符合自己需求的内置动画Widget。你还有两种选择，创建独立的动画Widget（扩展AnimatedWidget），或者扩展Widget（使用AnimatedBuilder）。\n如果在动画执行的过程中，碰到了性能的问题的话，我们可以考虑使用CustomPainter进行动画处理.\n小结 以上我们了解了动画的类型以及如何选择创建动画方式。通过下面的动画决策树，可以帮助你选择最适合你的动画方式:\n当然动画的难易程度已从隐式动画、显式动画、自定义绘制CustomPainter递增。 .\n",
    "ref": "/blog/flutter_animation_start/"
  },{
    "title": "关于我",
    "date": "",
    "description": "一个会点 Flutter 的 iOSer，目前正在努力脱贫中！",
    "body": " 余武超/男/1991 本科/东华理工大学/信息管理与信息系统 工作年限：6年 期望职位：iOS高级程序员 期望城市：上海 Github：https://github.com/yuwuchaio  联系方式  手机：17621373658 Email：656733936@qq.com  工作经历 上海狮搏实业投资有限公司 （2017年4月 ~ 至今 ） 88共享出行 88共享出行是一款为用户提供便捷、安全、实惠的“共享化”出行解决方案的App。平台目前有拼车、共享汽车、共享班车三个业务模块，相互支撑，满足工作通勤和休闲出行的需求。\n主要工作：\n 负责推动项目的组件化，采用 cocoapods 抽取基础组件（日志、分享、工具分类、本地存储等）及功能组件（支付、地图、定位），分离拼车、班车、租车等业务线。通过中间路由完成各模块间的调用。 在开发过程中定期对App的ipa包大小压缩（通过图片压缩、LinkMap 结合 Mach-O删除未使用的代码） 结合 WKWebView 和 前端约定，制定 App 和前端的交互方式替换原先传统拦截跳转方式。 搭建（Fastlane + pgyer）自动打包测试环境，提升测试效率。  上海逸尚信息咨询有限公司 （ 2015年10月 ~ 2017年4月 ） 优料宝 优料宝是一个面向设计师的O2O面料营销平台，主要是为面料商和设计师提供直接沟通的平台。\n主要工作：个人作为核心开发在项目中负责产品模块、会员模块、购物车模块、环信聊天模块及公用模块的开发维护。\n 在开发的过程中优化了公司代码的公共库类（减少公共库间的依赖，降低代码的耦合性。做到库之间尽量独立）。 与后台一起，独立完成环信聊天模块。 由于Apple审核时长的特殊性，主动调研使用JSpatch编写Hotfix脚本集成在项目中使用，补充了线上事故的补救能力（目前由于苹果审核规则现已经下线使用）。  国美在线电子商务有限公司（北京）（ 2014年7月 ~ 2015年8月 ） 国美 国美是国美电器唯一官方网上商城App，中国领先的专业家电网购平台。\n主要工作：个人在项目中负责会员中心模块。主要负责钱包、订单、优惠券、登录。\n 参与项目日常任务开发、维护及自测工作. 使用Analyze分析代码中潜在问题、使用Instrument检测内存泄漏、分析代码的执行时间等。 参与需求评审并开发、讨论API接口设计、交互改善。 参加Code Review，确保提交高质量的代码，完成开发任务。  技能清单  精通Objective-C语言，熟悉 Objective-C 的底层原理、内存管理。 熟悉runtime、runloop机制,了解 Swift。 熟悉常用存储技术：FMDB、NSUserDefaults。 熟悉 iOS 常用开发工具：Instrument、Charles 、Wireshark 熟悉协议相关：HTTP/HTTPS、TCP/IP。 熟练掌握SVN、Git、cocoapods及GitFlow开发流程 熟悉常用的三方库AFNetwork、SDWebImaage、YYModel、ASpect等。  ",
    "ref": "/about/"
  }]
