[{
    "title": "【译】Flutter动画系列隐式动画",
    "date": "",
    "description": "",
    "body": "上一篇文章【译】FLUTTER 动画系列—初篇，概述了下Flutter中的动画类型，及如何选择恰当的动画创建方式，接下来我们来看下最简单的动画，隐式动画。\n系统的隐式动画Widget 在 Flutter 中的 Widgets 中有一部已经实现隐式动画Widget。如下图列出部分：\n首先我们来看一段未使用动画的代码：\n bool _bigger = false; @override Widget build(BuildContext context) { return Scaffold( body: Column( mainAxisAlignment: MainAxisAlignment.center, children: \u0026lt;Widget\u0026gt;[ Center( child: Container( width: _bigger ? 100 : 500, height: 100, color: Colors.red, ), ), RaisedButton( onPressed: () =\u0026gt; setState(() { _bigger = !_bigger; }), child: Icon(Icons.star), ), ], ), ); } 未加动画效果时，矩形的形变会显得十分生硬，如果使用AnimatedContainer替换Container，增加一个动画的过渡效果：\n Center( child: AnimatedContainer( width: _bigger ? 100 : 500, height: 100, color: Colors.red, duration: Duration(seconds: 1), ), ), 整个过渡过程显得比较自然顺畅，我们通过新旧值之间的值进行动画处理的过程称为插值。每当旧值和新值发生变化时，AnimatedContainer便会处理其属性插值。\n同样我们也可以通过插值来修改AnimatedContainer的其它属性，包括decoration 的渐变色:\nAnimatedContainer( decoration: BoxDecoration( gradient: RadialGradient( colors: [Colors.purple, Colors.transparent], stops: [ _bigger ? 0.2 : 0.5, 1.0]) ), ), 上述代码很简单的演示如何使用 隐式动画Widget 来实现动画效果，非常的方便简单，但这也意味着可灵活性较差，在隐式动画Widget中，我们控制动画效果只能控制动画时长（Duration）和动画的曲线（Curve,具体的曲线效果可以参考 系统自带的曲线效果）。\nAnimatedContainer( width: _bigger ? 100 : 500, child: Image.asset('assets/star.png'), duration: Duration(seconds: 1), curve: Curves.easeInOutQuint, ), 另外除了系统自带的曲线效果外，我们还可以通过继承Curve来实现自定义的曲线效果,如下实现了正弦曲线。\nclass SineCurve extends Curve { final double count; SineCurve({this.count = 1}); @override double transformInternal(double t) { return sin(count * 2 * pi * t) * 0.5 + 0.5; } } 小结 在Flutter中，系统已经提供了隐式动画的Widget，这些Widget是普通Widget的动画版本，我们可以通过 duration、curve来控制动画效果。\n还有我们不一定需要通过StatefulWidget中使用setState来生成动画效果，我们也可以使用StreamBuilder和FutureBuilder来触发动画。\nFutureBuilder( future: future, builder: (BuildContext context, AsyncSnapshot\u0026lt;String\u0026gt; snapshot) { double width; switch(snapshot.connectionState) { case ConnectionState.none: case ConnectionState.waiting: case ConnectionState.active: width = 0; break; case ConnectionState.done: width = 500; break; } return AnimatedContainer( width: width, height: 100, color: Colors.red, duration: Duration(seconds: 1), ); } ), 以上，如果Flutter框架提供给你的隐式动画Widget不能满足你的需求，那么进一步的话可以试试使用TweenAnimationBuilder 来自定义创建隐式动画。\n自定义隐式动画TweenAnimationBuilder 使用TweenAnimationBuilder，该 Widget 使用的时候我们需要传递 duration 参数动画时间、tween 参数动画要设置的值的范围（补间）、重要的还有 builder 参数，builder函数的参数包含context、补间参数tween的类型、还有child,让我们看一个简单的例子，红色的矩形框旋转360度：\nTweenAnimationBuilder\u0026lt;double\u0026gt;( tween: Tween\u0026lt;double\u0026gt;(begin: 0, end: 2 * pi), duration: Duration(seconds: 2), builder: (BuildContext context, double angle, Widget child) { return Transform.rotate( angle: angle, child: Container( color: Colors.red, width: 100, height: 100, ), ); }, ), 让我们再来看个例子，使用ColorFilered Wideget做一个图片渲染的效果。\nTweenAnimationBuilder( tween: ColorTween(begin: Colors.white, end: Colors.red), duration: Duration(seconds: 2), builder: (_, Color color, __) { return ColorFiltered( child: Image.asset('assets/sun.png'), colorFilter: ColorFilter.mode(color, BlendMode.modulate), ); }, ) 通过Tween补间参数设置了从白色到红色的过渡，由颜色和图片的混合，另外如何补间参数可变的，所以如果补间参数是不变的话可以将参数声明为静态常量来使用。\nstatic final colorTween = ColorTween(begin: Colors.white, end: Colors.red); Center( child: TweenAnimationBuilder\u0026lt;Color\u0026gt;( tween: colorTween, duration: Duration(seconds: 2), builder: (_, Color color, __) { return ColorFiltered( child: Image.asset('assets/sun.png'), colorFilter: ColorFilter.mode(color, BlendMode.modulate), ); }, ), ), 动态修改 Tween 参数 上面的例子中我们并没有调用setState，仅仅展示了动画从Tween的初始值到终值的简单动画效果，除此之外，我们还可以通过动态的修改Tween来实现动画效果：\nclass OngoingAnimationByModifyingEndTweenValue extends StatefulWidget { @override _OngoingAnimationState createState() =\u0026gt; _OngoingAnimationState(); } class _OngoingAnimationState extends State\u0026lt;OngoingAnimationByModifyingEndTweenValue\u0026gt; { double _newValue = .4; Color _newColor = Colors.white; @override Widget build(BuildContext context) { return Stack( children: \u0026lt;Widget\u0026gt;[ starsBackground, Column( children: \u0026lt;Widget\u0026gt;[ Center( child: TweenAnimationBuilder( tween: ColorTween(begin: Colors.white, end: _newColor), duration: Duration(seconds: 2), builder: (_, Color color, __) { return ColorFiltered( child: Image.asset('assets/sun.png'), colorFilter: ColorFilter.mode(color, BlendMode.modulate), ); }, ), ), Slider.adaptive( value: _newValue, onChanged: (double value) { setState(() { _newValue = value; _newColor = Color.lerp(Colors.white, Colors.red, value); }); }, ), ], ), ], ); } } 首先我们声明一个_newColor  作为 Tween 的终值,通过滑动 Slider Widget，我们改变_newColor。调用setState每次的滑动都会使得动画更新。\n另外，需要明确的一点事，TweenAnimationBuilder 的动画属性值是从当前值向最新的终值转变的。如上面的例子，当我们拖动 Slider 时，颜色变化相对于之前的颜色,而不是每次从最初的白色开始动画渐变。\nTweenAnimationBuilder 总会将当前颜色到终值颜色平滑的动画过渡。所以如果改变的不是终值颜色而是开始颜色，动画效果是不会有区别的。\n补充说明 除了上诉介绍的TweenAnimationBuilder参数外，我们还需要注意的参数还有：\n curve，动画曲线，在上一篇文章Flutter 动画详解系列有过介绍。 动画完成的回调 onEnd :，我们可以在动画完成时完成指定的操作，如动画完成后显示另一个Widget。 child参数，child参数的设置其实也是一个潜在的性能优化项，正确的设置child，对动画性能的提升也是一大帮助。例子中虽然颜色发生了变化，但图片本身保持不变，但是当前代码是每次build都会重新创建Image Widget。针对此类的优化方式，我们可以提前创建图片，将图片作为参数传入，这样 Flutter 就知道每帧渲染时变化的是颜色，而不是图片本身。 当然因为例子本身简单，所以此优化不会有明显的效果，但当实现复杂动画效果时，慎重考虑child的实现，将会对你的动画性能带来一定的帮助。  总结 OK，以上就是对 Flutter 中的隐式动画的介绍了，包括系统自带的AnimatedFoo和TweenAnimationBuilder 都有了一定的涉及。包括如何不通过使用StatefulWidget来实现动画效果、如何改变tween的终值产生顺滑的动画效果、如何提升TweenAnimationBuilder 的动画性能时，我们可以设置tween参数时可以考虑设置为静态常量，设置child参数时可以考虑提前创建好child，作为参数传递。\n",
    "ref": "/blog/flutter_animation_implict/"
  },{
    "title": "【译】Flutter 动画系列—初篇",
    "date": "",
    "description": "",
    "body": " 前言：动画会让用户界面感觉更直观、流畅，能改善用户体验。 在Flutter中我们可以轻松实现各种动画类型。目前Flutter中很多 widget（特别是Material Design widgets），都实现了设计规范中定义的标准动画效果。但是我们也可以自定义这些动画效果。\n Flutter中动画的类型 在Flutter中动画分为两类： 基于图形动画（以图形的形式制作动画，三方库 Rive 、Lottie）、基于代码动画 （主要针对于 Widgets 的大小、 颜色、形状变动）。文章主要讲解基于代码动画类型的动画。\n基于代码动画 在 Flutter 中基于代码动画，也主要分为两种形式：补间(Tween)动画、 拟物动画。\n补间(Tween)动画 Tween意为在两者之间，在Tween动画中我们定义开始点和结束点、时间线以及定义转换时间和速度的曲线。然后就交由框架完成如何从开始点过渡到结束点的动画效果。\n拟物动画 拟物动画是对真实世界的行为进行建模，使动画效果类似于现实中的物理效果。例如当你掷球时，它在何处落地，取决于抛球速度有多快、球有多重、距离地面有多远。\n如何创建恰当的动画 在知道 Flutter 的动画类型之后，我们需要知道如何创建我们想要的动画效果，在 Flutter 动画也被分为隐式动画、 显示动画。当我们创建一个动画效果时，如果你不知道如何选择这两种方式，你可以试着回答下面的三个问题：\n  动画效果是否\u0026quot;永远\u0026quot;重复？永远是指某个条件下动画一直重复，当条件变动时，动画可以停止。\n  动画的值是否不连续？如下图圆从小到大、从小到大，并未连续的小-\u0026gt;大-\u0026gt;小-\u0026gt;大。   动画是否由多个Widgets共同组成？   如果以上三个问题，都是肯定的回答，那么你需要的是显示动画，否则使用隐式动画将会是你更好的选择。\n隐式动画 如果你选择了隐式动画之后，首先你可以尝试在 Flutter 框架中寻找符合你要求的 Widgets，Flutter 对隐式动画的命名方式一般为 AnimatedFoo， 其中 Foo 是需要设置动画的属性。如果找不到符合自己需求的内置动画Widget，我们可以使用 TweenAnimationBuilder（补间动画生成器）创建自定义的隐式动画。\n显示动画 如果你的选择是显示动画，那么你也可以尝试在 Flutter 框架中寻找符合 Widgets。Flutter 对显示动画的命名方式一般为FooTransition， 其中 Foo 是需要设置动画的属性（如SlideTransition）。如果找不到符合自己需求的内置动画Widget。你还有两种选择，创建独立的动画Widget（扩展AnimatedWidget），或者扩展Widget（使用AnimatedBuilder）。\n如果在动画执行的过程中，碰到了性能的问题的话，我们可以考虑使用CustomPainter进行动画处理.\n小结 以上我们了解了动画的类型以及如何选择创建动画方式。通过下面的动画决策树，可以帮助你选择最适合你的动画方式:\n当然动画的难易程度已从隐式动画、显式动画、自定义绘制CustomPainter递增。 .\n",
    "ref": "/blog/flutter_animation_start/"
  },{
    "title": "关于我",
    "date": "",
    "description": "一个会点 Flutter 的 iOSer，目前正在努力脱贫中！",
    "body": " 余武超/男/1991 本科/东华理工大学/信息管理与信息系统 工作年限：6年 期望职位：iOS高级程序员 期望城市：上海 Github：https://github.com/yuwuchaio  联系方式  手机：17621373658 Email：656733936@qq.com  工作经历 上海狮搏实业投资有限公司 （2017年4月 ~ 至今 ） 88共享出行 88共享出行是一款为用户提供便捷、安全、实惠的“共享化”出行解决方案的App。平台目前有拼车、共享汽车、共享班车三个业务模块，相互支撑，满足工作通勤和休闲出行的需求。\n主要工作：\n 负责推动项目的组件化，采用 cocoapods 抽取基础组件（日志、分享、工具分类、本地存储等）及功能组件（支付、地图、定位），分离拼车、班车、租车等业务线。通过中间路由完成各模块间的调用。 在开发过程中定期对App的ipa包大小压缩（通过图片压缩、LinkMap 结合 Mach-O删除未使用的代码） 结合 WKWebView 和 前端约定，制定 App 和前端的交互方式替换原先传统拦截跳转方式。 搭建（Fastlane + pgyer）自动打包测试环境，提升测试效率。  上海逸尚信息咨询有限公司 （ 2015年10月 ~ 2017年4月 ） 优料宝 优料宝是一个面向设计师的O2O面料营销平台，主要是为面料商和设计师提供直接沟通的平台。\n主要工作：个人作为核心开发在项目中负责产品模块、会员模块、购物车模块、环信聊天模块及公用模块的开发维护。\n 在开发的过程中优化了公司代码的公共库类（减少公共库间的依赖，降低代码的耦合性。做到库之间尽量独立）。 与后台一起，独立完成环信聊天模块。 由于Apple审核时长的特殊性，主动调研使用JSpatch编写Hotfix脚本集成在项目中使用，补充了线上事故的补救能力（目前由于苹果审核规则现已经下线使用）。  国美在线电子商务有限公司（北京）（ 2014年7月 ~ 2015年8月 ） 国美 国美是国美电器唯一官方网上商城App，中国领先的专业家电网购平台。\n主要工作：个人在项目中负责会员中心模块。主要负责钱包、订单、优惠券、登录。\n 参与项目日常任务开发、维护及自测工作. 使用Analyze分析代码中潜在问题、使用Instrument检测内存泄漏、分析代码的执行时间等。 参与需求评审并开发、讨论API接口设计、交互改善。 参加Code Review，确保提交高质量的代码，完成开发任务。  技能清单  精通Objective-C语言，熟悉 Objective-C 的底层原理、内存管理。 熟悉runtime、runloop机制,了解 Swift。 熟悉常用存储技术：FMDB、NSUserDefaults。 熟悉 iOS 常用开发工具：Instrument、Charles 、Wireshark 熟悉协议相关：HTTP/HTTPS、TCP/IP。 熟练掌握SVN、Git、cocoapods及GitFlow开发流程 熟悉常用的三方库AFNetwork、SDWebImaage、YYModel、ASpect等。  ",
    "ref": "/about/"
  }]
